// Generated by gencpp from file uav_messages/GroundClothPoints.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_GROUNDCLOTHPOINTS_H
#define UAV_MESSAGES_MESSAGE_GROUNDCLOTHPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace uav_messages
{
template <class ContainerAllocator>
struct GroundClothPoints_
{
  typedef GroundClothPoints_<ContainerAllocator> Type;

  GroundClothPoints_()
    : origin()
    , width(0)
    , length(0)
    , resolution(0.0)
    , heights()  {
    }
  GroundClothPoints_(const ContainerAllocator& _alloc)
    : origin(_alloc)
    , width(0)
    , length(0)
    , resolution(0.0)
    , heights(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _length_type;
  _length_type length;

   typedef double _resolution_type;
  _resolution_type resolution;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heights_type;
  _heights_type heights;





  typedef boost::shared_ptr< ::uav_messages::GroundClothPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::GroundClothPoints_<ContainerAllocator> const> ConstPtr;

}; // struct GroundClothPoints_

typedef ::uav_messages::GroundClothPoints_<std::allocator<void> > GroundClothPoints;

typedef boost::shared_ptr< ::uav_messages::GroundClothPoints > GroundClothPointsPtr;
typedef boost::shared_ptr< ::uav_messages::GroundClothPoints const> GroundClothPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::GroundClothPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::GroundClothPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::GroundClothPoints_<ContainerAllocator1> & lhs, const ::uav_messages::GroundClothPoints_<ContainerAllocator2> & rhs)
{
  return lhs.origin == rhs.origin &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.resolution == rhs.resolution &&
    lhs.heights == rhs.heights;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::GroundClothPoints_<ContainerAllocator1> & lhs, const ::uav_messages::GroundClothPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::GroundClothPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::GroundClothPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::GroundClothPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38fbc55ea331f440db17b20331203f67";
  }

  static const char* value(const ::uav_messages::GroundClothPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38fbc55ea331f440ULL;
  static const uint64_t static_value2 = 0xdb17b20331203f67ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/GroundClothPoints";
  }

  static const char* value(const ::uav_messages::GroundClothPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Data alignment origin\n"
"geometry_msgs/Vector3 origin\n"
"uint32 width\n"
"uint32 length\n"
"float64 resolution\n"
"float64[] heights\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_messages::GroundClothPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.origin);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.resolution);
      stream.next(m.heights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GroundClothPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::GroundClothPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::GroundClothPoints_<ContainerAllocator>& v)
  {
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.length);
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "heights[]" << std::endl;
    for (size_t i = 0; i < v.heights.size(); ++i)
    {
      s << indent << "  heights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heights[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_GROUNDCLOTHPOINTS_H
