// Generated by gencpp from file uav_messages/TrajectoryTargetTestResponse.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTRESPONSE_H
#define UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/MultiDOFJointTrajectory.h>

namespace uav_messages
{
template <class ContainerAllocator>
struct TrajectoryTargetTestResponse_
{
  typedef TrajectoryTargetTestResponse_<ContainerAllocator> Type;

  TrajectoryTargetTestResponse_()
    : success(false)
    , error(0)
    , runtime_us(0)
    , traj()  {
    }
  TrajectoryTargetTestResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error(0)
    , runtime_us(0)
    , traj(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint32_t _runtime_us_type;
  _runtime_us_type runtime_us;

   typedef  ::trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator>  _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryTargetTestResponse_

typedef ::uav_messages::TrajectoryTargetTestResponse_<std::allocator<void> > TrajectoryTargetTestResponse;

typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestResponse > TrajectoryTargetTestResponsePtr;
typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestResponse const> TrajectoryTargetTestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error == rhs.error &&
    lhs.runtime_us == rhs.runtime_us &&
    lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "393baf917af587233c07fc1fdd6c6fe2";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x393baf917af58723ULL;
  static const uint64_t static_value2 = 0x3c07fc1fdd6c6fe2ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/TrajectoryTargetTestResponse";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"uint8 error\n"
"uint32 runtime_us\n"
"trajectory_msgs/MultiDOFJointTrajectory traj\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectory\n"
"# The header is used to specify the coordinate frame and the reference time for the trajectory durations\n"
"Header header\n"
"\n"
"# A representation of a multi-dof joint trajectory (each point is a transformation)\n"
"# Each point along the trajectory will include an array of positions/velocities/accelerations\n"
"# that has the same length as the array of joint names, and has the same order of joints as \n"
"# the joint names array.\n"
"\n"
"string[] joint_names\n"
"MultiDOFJointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\n"
"# Each multi-dof joint can specify a transform (up to 6 DOF)\n"
"geometry_msgs/Transform[] transforms\n"
"\n"
"# There can be a velocity specified for the origin of the joint \n"
"geometry_msgs/Twist[] velocities\n"
"\n"
"# There can be an acceleration specified for the origin of the joint \n"
"geometry_msgs/Twist[] accelerations\n"
"\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error);
      stream.next(m.runtime_us);
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryTargetTestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::TrajectoryTargetTestResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "runtime_us: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.runtime_us);
    s << indent << "traj: ";
    s << std::endl;
    Printer< ::trajectory_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.traj);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTRESPONSE_H
