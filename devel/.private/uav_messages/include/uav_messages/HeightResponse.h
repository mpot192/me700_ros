// Generated by gencpp from file uav_messages/HeightResponse.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_HEIGHTRESPONSE_H
#define UAV_MESSAGES_MESSAGE_HEIGHTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_messages
{
template <class ContainerAllocator>
struct HeightResponse_
{
  typedef HeightResponse_<ContainerAllocator> Type;

  HeightResponse_()
    : status(0)
    , valid()
    , heights()
    , mean(0.0)  {
    }
  HeightResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , valid(_alloc)
    , heights(_alloc)
    , mean(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _valid_type;
  _valid_type valid;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heights_type;
  _heights_type heights;

   typedef double _mean_type;
  _mean_type mean;





  typedef boost::shared_ptr< ::uav_messages::HeightResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::HeightResponse_<ContainerAllocator> const> ConstPtr;

}; // struct HeightResponse_

typedef ::uav_messages::HeightResponse_<std::allocator<void> > HeightResponse;

typedef boost::shared_ptr< ::uav_messages::HeightResponse > HeightResponsePtr;
typedef boost::shared_ptr< ::uav_messages::HeightResponse const> HeightResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::HeightResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::HeightResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::HeightResponse_<ContainerAllocator1> & lhs, const ::uav_messages::HeightResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.valid == rhs.valid &&
    lhs.heights == rhs.heights &&
    lhs.mean == rhs.mean;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::HeightResponse_<ContainerAllocator1> & lhs, const ::uav_messages::HeightResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::HeightResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::HeightResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::HeightResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::HeightResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::HeightResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::HeightResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::HeightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7e561783e674b1966652727cb3df7b9";
  }

  static const char* value(const ::uav_messages::HeightResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7e561783e674b19ULL;
  static const uint64_t static_value2 = 0x66652727cb3df7b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::HeightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/HeightResponse";
  }

  static const char* value(const ::uav_messages::HeightResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::HeightResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"bool[] valid\n"
"float64[] heights\n"
"float64 mean\n"
;
  }

  static const char* value(const ::uav_messages::HeightResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::HeightResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.valid);
      stream.next(m.heights);
      stream.next(m.mean);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeightResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::HeightResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::HeightResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "valid[]" << std::endl;
    for (size_t i = 0; i < v.valid.size(); ++i)
    {
      s << indent << "  valid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.valid[i]);
    }
    s << indent << "heights[]" << std::endl;
    for (size_t i = 0; i < v.heights.size(); ++i)
    {
      s << indent << "  heights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heights[i]);
    }
    s << indent << "mean: ";
    Printer<double>::stream(s, indent + "  ", v.mean);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_HEIGHTRESPONSE_H
