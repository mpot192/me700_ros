// Generated by gencpp from file uav_messages/TrajectoryTargetTestRequest.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTREQUEST_H
#define UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace uav_messages
{
template <class ContainerAllocator>
struct TrajectoryTargetTestRequest_
{
  typedef TrajectoryTargetTestRequest_<ContainerAllocator> Type;

  TrajectoryTargetTestRequest_()
    : start()
    , end()  {
    }
  TrajectoryTargetTestRequest_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_type;
  _end_type end;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(ERR_NO_PATH_FOUND)
  #undef ERR_NO_PATH_FOUND
#endif

  enum {
    OK = 0u,
    ERR_NO_PATH_FOUND = 1u,
  };


  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryTargetTestRequest_

typedef ::uav_messages::TrajectoryTargetTestRequest_<std::allocator<void> > TrajectoryTargetTestRequest;

typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestRequest > TrajectoryTargetTestRequestPtr;
typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetTestRequest const> TrajectoryTargetTestRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5a22bfbda3521cd8daea1983c7d988a";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5a22bfbda3521cdULL;
  static const uint64_t static_value2 = 0x8daea1983c7d988aULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/TrajectoryTargetTestRequest";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 OK=0\n"
"uint8 ERR_NO_PATH_FOUND=1\n"
"\n"
"geometry_msgs/Point start\n"
"geometry_msgs/Point end\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryTargetTestRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::TrajectoryTargetTestRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETTESTREQUEST_H
