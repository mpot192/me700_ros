// Generated by gencpp from file uav_messages/LeftRightRow.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_LEFTRIGHTROW_H
#define UAV_MESSAGES_MESSAGE_LEFTRIGHTROW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_messages
{
template <class ContainerAllocator>
struct LeftRightRow_
{
  typedef LeftRightRow_<ContainerAllocator> Type;

  LeftRightRow_()
    : left_r(0.0)
    , left_theta(0.0)
    , right_r(0.0)
    , right_theta(0.0)  {
    }
  LeftRightRow_(const ContainerAllocator& _alloc)
    : left_r(0.0)
    , left_theta(0.0)
    , right_r(0.0)
    , right_theta(0.0)  {
  (void)_alloc;
    }



   typedef double _left_r_type;
  _left_r_type left_r;

   typedef double _left_theta_type;
  _left_theta_type left_theta;

   typedef double _right_r_type;
  _right_r_type right_r;

   typedef double _right_theta_type;
  _right_theta_type right_theta;





  typedef boost::shared_ptr< ::uav_messages::LeftRightRow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::LeftRightRow_<ContainerAllocator> const> ConstPtr;

}; // struct LeftRightRow_

typedef ::uav_messages::LeftRightRow_<std::allocator<void> > LeftRightRow;

typedef boost::shared_ptr< ::uav_messages::LeftRightRow > LeftRightRowPtr;
typedef boost::shared_ptr< ::uav_messages::LeftRightRow const> LeftRightRowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::LeftRightRow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::LeftRightRow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::LeftRightRow_<ContainerAllocator1> & lhs, const ::uav_messages::LeftRightRow_<ContainerAllocator2> & rhs)
{
  return lhs.left_r == rhs.left_r &&
    lhs.left_theta == rhs.left_theta &&
    lhs.right_r == rhs.right_r &&
    lhs.right_theta == rhs.right_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::LeftRightRow_<ContainerAllocator1> & lhs, const ::uav_messages::LeftRightRow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::LeftRightRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::LeftRightRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::LeftRightRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::LeftRightRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::LeftRightRow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::LeftRightRow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::LeftRightRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9547fcc8a1d9006ddee6af9894e1d3ac";
  }

  static const char* value(const ::uav_messages::LeftRightRow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9547fcc8a1d9006dULL;
  static const uint64_t static_value2 = 0xdee6af9894e1d3acULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::LeftRightRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/LeftRightRow";
  }

  static const char* value(const ::uav_messages::LeftRightRow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::LeftRightRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Most likely left/right lines in radius/angle formation.\n"
"float64 left_r\n"
"float64 left_theta\n"
"float64 right_r\n"
"float64 right_theta\n"
;
  }

  static const char* value(const ::uav_messages::LeftRightRow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::LeftRightRow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_r);
      stream.next(m.left_theta);
      stream.next(m.right_r);
      stream.next(m.right_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeftRightRow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::LeftRightRow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::LeftRightRow_<ContainerAllocator>& v)
  {
    s << indent << "left_r: ";
    Printer<double>::stream(s, indent + "  ", v.left_r);
    s << indent << "left_theta: ";
    Printer<double>::stream(s, indent + "  ", v.left_theta);
    s << indent << "right_r: ";
    Printer<double>::stream(s, indent + "  ", v.right_r);
    s << indent << "right_theta: ";
    Printer<double>::stream(s, indent + "  ", v.right_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_LEFTRIGHTROW_H
