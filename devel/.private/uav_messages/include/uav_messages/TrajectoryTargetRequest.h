// Generated by gencpp from file uav_messages/TrajectoryTargetRequest.msg
// DO NOT EDIT!


#ifndef UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETREQUEST_H
#define UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace uav_messages
{
template <class ContainerAllocator>
struct TrajectoryTargetRequest_
{
  typedef TrajectoryTargetRequest_<ContainerAllocator> Type;

  TrajectoryTargetRequest_()
    : waypoints()
    , start_velocity()
    , end_velocity()
    , target_velocity()  {
    }
  TrajectoryTargetRequest_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)
    , start_velocity(_alloc)
    , end_velocity(_alloc)
    , target_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _start_velocity_type;
  _start_velocity_type start_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _end_velocity_type;
  _end_velocity_type end_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _target_velocity_type;
  _target_velocity_type target_velocity;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(ERR_NO_PATH_FOUND)
  #undef ERR_NO_PATH_FOUND
#endif

  enum {
    OK = 0u,
    ERR_NO_PATH_FOUND = 1u,
  };


  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryTargetRequest_

typedef ::uav_messages::TrajectoryTargetRequest_<std::allocator<void> > TrajectoryTargetRequest;

typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetRequest > TrajectoryTargetRequestPtr;
typedef boost::shared_ptr< ::uav_messages::TrajectoryTargetRequest const> TrajectoryTargetRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints &&
    lhs.start_velocity == rhs.start_velocity &&
    lhs.end_velocity == rhs.end_velocity &&
    lhs.target_velocity == rhs.target_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator1> & lhs, const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "512cc6ddbabf522dc3869f10476712b3";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x512cc6ddbabf522dULL;
  static const uint64_t static_value2 = 0xc3869f10476712b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_messages/TrajectoryTargetRequest";
  }

  static const char* value(const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 OK=0\n"
"uint8 ERR_NO_PATH_FOUND=1\n"
"\n"
"geometry_msgs/Point[] waypoints\n"
"geometry_msgs/Vector3 start_velocity\n"
"geometry_msgs/Vector3 end_velocity\n"
"geometry_msgs/Vector3 target_velocity\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
      stream.next(m.start_velocity);
      stream.next(m.end_velocity);
      stream.next(m.target_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryTargetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_messages::TrajectoryTargetRequest_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "start_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.start_velocity);
    s << indent << "end_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.end_velocity);
    s << indent << "target_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.target_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGES_MESSAGE_TRAJECTORYTARGETREQUEST_H
