# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uav_messages/TrajectoryTargetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TrajectoryTargetRequest(genpy.Message):
  _md5sum = "512cc6ddbabf522dc3869f10476712b3"
  _type = "uav_messages/TrajectoryTargetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 OK=0
uint8 ERR_NO_PATH_FOUND=1

geometry_msgs/Point[] waypoints
geometry_msgs/Vector3 start_velocity
geometry_msgs/Vector3 end_velocity
geometry_msgs/Vector3 target_velocity

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  OK = 0
  ERR_NO_PATH_FOUND = 1

  __slots__ = ['waypoints','start_velocity','end_velocity','target_velocity']
  _slot_types = ['geometry_msgs/Point[]','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoints,start_velocity,end_velocity,target_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryTargetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.waypoints is None:
        self.waypoints = []
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.end_velocity is None:
        self.end_velocity = geometry_msgs.msg.Vector3()
      if self.target_velocity is None:
        self.target_velocity = geometry_msgs.msg.Vector3()
    else:
      self.waypoints = []
      self.start_velocity = geometry_msgs.msg.Vector3()
      self.end_velocity = geometry_msgs.msg.Vector3()
      self.target_velocity = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9d().pack(_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.end_velocity.x, _x.end_velocity.y, _x.end_velocity.z, _x.target_velocity.x, _x.target_velocity.y, _x.target_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.end_velocity is None:
        self.end_velocity = geometry_msgs.msg.Vector3()
      if self.target_velocity is None:
        self.target_velocity = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 72
      (_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.end_velocity.x, _x.end_velocity.y, _x.end_velocity.z, _x.target_velocity.x, _x.target_velocity.y, _x.target_velocity.z,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9d().pack(_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.end_velocity.x, _x.end_velocity.y, _x.end_velocity.z, _x.target_velocity.x, _x.target_velocity.y, _x.target_velocity.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.end_velocity is None:
        self.end_velocity = geometry_msgs.msg.Vector3()
      if self.target_velocity is None:
        self.target_velocity = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.waypoints.append(val1)
      _x = self
      start = end
      end += 72
      (_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.end_velocity.x, _x.end_velocity.y, _x.end_velocity.z, _x.target_velocity.x, _x.target_velocity.y, _x.target_velocity.z,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uav_messages/TrajectoryTargetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryTargetResponse(genpy.Message):
  _md5sum = "21f580d3708977aeeb985babbeadc7e5"
  _type = "uav_messages/TrajectoryTargetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
uint8 error
"""
  __slots__ = ['success','error']
  _slot_types = ['bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryTargetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.error is None:
        self.error = 0
    else:
      self.success = False
      self.error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.error,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.error,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class TrajectoryTarget(object):
  _type          = 'uav_messages/TrajectoryTarget'
  _md5sum = 'ccd1ece0eed8a932ade7a0f997a2a505'
  _request_class  = TrajectoryTargetRequest
  _response_class = TrajectoryTargetResponse
